{"version":3,"sources":["webpack:///./src/components/project.tsx","webpack:///./src/components/category.tsx","webpack:///./src/components/category-box.tsx","webpack:///./src/data/projects.ts","webpack:///./src/pages/projects.tsx"],"names":["ProjectContainer","styled","div","Title","h2","Description","p","CategoryContainer","Category","span","props","color","Project","title","description","categories","post","onClick","event","navigate","sort","map","category","key","name","handleClickCategory","handleClear","children","toggledState","useState","toggled","setToggled","ButtonContainer","button","currentTarget","innerText","className","CategoryBoxContainer","section","CategoryBoxHeader","h4","CategoryRow","CategoryBox","filterProjects","style","justifyContent","document","getElementsByClassName","classList","remove","projectData","ProjectHeader","h1","ProjectDescription","h3","Projects","projects","setProjects","project","concat","Object","values","reduce","acc","cur","assign","getCategories","fontWeight","filteredProjects","matchesCategory","push","projectInfo"],"mappings":"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","file":"component---src-pages-projects-tsx-91a516456b82468743a0.js","sourcesContent":["import React, { FunctionComponent } from 'react';\r\nimport styled from 'styled-components';\r\nimport { navigate } from 'gatsby';\r\n\r\ninterface CategoryFormat {\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\ninterface ProjectProps {\r\n    title: string;\r\n    description: string;\r\n    categories: Array<CategoryFormat>;\r\n    post: string;\r\n}\r\n\r\nconst ProjectContainer = styled.div`\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    margin: 10px 15px;\r\n    min-height: 150px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-content: center;\r\n    flex: 0 1 calc(100% / 2);\r\n    box-shadow: 2px 2px #d3d3d3;\r\n    border: 1px solid #cccccc;\r\n    // border-radius: 6px;\r\n    background: #fdfdfd;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        transform: scale(1.05);\r\n    }\r\n`;\r\n\r\nconst Title = styled.h2`\r\n    text-align: center;\r\n    width: 100%;\r\n    padding: 5px;\r\n    font-size: 0.8rem;\r\n`;\r\n\r\nconst Description = styled.p`\r\n    padding: 0 auto;\r\n    font-size: 0.6rem;\r\n`;\r\n\r\nconst CategoryContainer = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    padding-bottom: 10px;\r\n    margin: auto auto 0;\r\n`;\r\n\r\nconst Category = styled.span`\r\n    color: black;\r\n    background: ;\r\n    border: 1px solid ${(props) => props.color};\r\n    font-size: 0.6rem;\r\n    margin: 2px 6px;\r\n    padding: 2px 8px;\r\n`;\r\n\r\nconst Project: FunctionComponent<ProjectProps> = ({\r\n    title,\r\n    description,\r\n    categories,\r\n    post,\r\n}) => {\r\n    const handleClick = (event: React.MouseEvent<HTMLDivElement>) =>\r\n        navigate(`/projects/${post}`);\r\n\r\n    return (\r\n        <ProjectContainer onClick={handleClick}>\r\n            <Title>{title}</Title>\r\n            <Description>{description}</Description>\r\n            <CategoryContainer>\r\n                {categories.sort().map((category) => (\r\n                    <Category\r\n                        key={category.name}\r\n                        color={category.color || 'lightgrey'}\r\n                    >\r\n                        {category.name}\r\n                    </Category>\r\n                ))}\r\n            </CategoryContainer>\r\n        </ProjectContainer>\r\n    );\r\n};\r\n\r\nexport default Project;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Category: React.FunctionComponent<{\r\n    handleClickCategory?: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n    handleClear?: () => void;\r\n    color?: string;\r\n    toggledState?: boolean;\r\n}> = ({\r\n    handleClickCategory,\r\n    handleClear,\r\n    children,\r\n    color = 'grey',\r\n    toggledState = false,\r\n}) => {\r\n    const [toggled, setToggled] = useState(toggledState);\r\n\r\n    const ButtonContainer = styled.button`\r\n        cursor: pointer;\r\n        background: white;\r\n        border: 1px solid ${color};\r\n        font-size: 0.6rem;\r\n        margin: 4px 3px;\r\n        padding: 2px 8px;\r\n\r\n        &:hover {\r\n            transform: scale(1.15) ease-in;\r\n            transition: 0.5s ease-in-out;\r\n        }\r\n\r\n        &.clicked {\r\n            background: ${color},\r\n            transition: 0.2s\r\n        }\r\n    `;\r\n\r\n    // let handleClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n    // if (handleClickCaregory) {\r\n    //     handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    //         setToggled(!toggled);\r\n    //         handleClickCaregory(event);\r\n    //     };\r\n    // } else if (handleClear) {\r\n    //     handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    //         setToggled(false);\r\n    //         handleClear(null);\r\n    //     };\r\n    // }\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (event.currentTarget.innerText === 'Clear Selection') handleClear();\r\n        else {\r\n            setToggled(!toggled);\r\n            handleClickCategory(event);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ButtonContainer\r\n            onClick={handleClick}\r\n            className={toggled ? 'clicked' : ''}\r\n        >\r\n            {children}\r\n        </ButtonContainer>\r\n    );\r\n};\r\n\r\nexport default Category;\r\n","import React, { FunctionComponent } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Category from './category';\r\n\r\nconst CategoryBoxContainer = styled.section`\r\n    padding: 10px 0;\r\n`;\r\n\r\nconst CategoryBoxHeader = styled.h4`\r\n    font-weight: normal;\r\n    font-size: 0.9rem;\r\n\r\n    @media screen and (max-width: 420px) {\r\n        text-align: center;\r\n        font-size 0.8rem;\r\n    }\r\n`;\r\n\r\nconst CategoryRow = styled((props) => <div {...props}></div>)`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n\r\n    &:not(:first-of-type) {\r\n        margin-top: 5px;\r\n    }\r\n`;\r\n\r\ninterface CategoryBoxProps {\r\n    categories: Array<{ name: string; color: string }> | null;\r\n    filterProjects: (category: string | null) => void;\r\n}\r\n\r\nconst CategoryBox: FunctionComponent<CategoryBoxProps> = ({\r\n    categories,\r\n    filterProjects,\r\n}) => {\r\n    const handleClickCategory = (\r\n        event: React.MouseEvent<HTMLButtonElement>\r\n    ) => {\r\n        filterProjects(event.currentTarget.innerText);\r\n    };\r\n\r\n    let defaultState = false;\r\n    const handleClear = () => {\r\n        filterProjects(null);\r\n        const toggledElements = document.getElementsByClassName('clicked');\r\n        for (const element of toggledElements) {\r\n            element.classList.remove('clicked');\r\n        }\r\n    };\r\n\r\n    if (categories === null) return null;\r\n\r\n    return (\r\n        <CategoryBoxContainer>\r\n            <CategoryBoxHeader>\r\n                Select a category to sort projects:\r\n            </CategoryBoxHeader>\r\n            <CategoryRow style={{ justifyContent: 'flex-start' }}>\r\n                {categories.map((category) => (\r\n                    <Category\r\n                        handleClickCategory={handleClickCategory}\r\n                        color={category.color}\r\n                        toggledState={defaultState}\r\n                    >\r\n                        {category.name}\r\n                    </Category>\r\n                ))}\r\n            </CategoryRow>\r\n            <CategoryRow style={{ justifyContent: 'flex-end' }}>\r\n                <Category handleClear={handleClear}>Clear Selection</Category>\r\n            </CategoryRow>\r\n        </CategoryBoxContainer>\r\n    );\r\n};\r\n\r\nexport default CategoryBox;\r\n","export const projectData = [\r\n    {\r\n        title: 'SoundTube',\r\n        description: `SoundTube is a social media and music sharing website.`,\r\n        categories: [\r\n            { name: 'HTML', color: '#e44d26' },\r\n            { name: 'CSS', color: '#264de4' },\r\n            { name: 'JavaScript', color: '#264de4' },\r\n            { name: 'Express', color: '' },\r\n            { name: 'JSON', color: '#466df4' },\r\n            { name: 'MySQL', color: '#47809d' },\r\n            { name: 'Node.js', color: '#70a761' },\r\n        ],\r\n        post: 'soundtube',\r\n    },\r\n    {\r\n        title: 'TypeScript MERN To Do Application',\r\n        description: `A to do application created in Typescript using the MERN Stack.`,\r\n        categories: [\r\n            { name: 'HTML', color: '#e44d26' },\r\n            { name: 'CSS', color: '#264de4' },\r\n            { name: 'JavaScript', color: '#264de4' },\r\n            { name: 'TypeScript', color: '#3178c6' },\r\n            { name: 'MongoDB', color: '#e58f14' },\r\n            { name: 'Express', color: 'green' },\r\n            { name: 'React', color: '#61dafb' },\r\n            { name: 'Node.js', color: '#70a761' },\r\n        ],\r\n        post: 'todo',\r\n    },\r\n    {\r\n        title: 'World of Tanks TypeScript API Wrapper (WIP)',\r\n        description: `A wrapper for WarGaming's API in TypeScript`,\r\n        categories: [\r\n            { name: 'TypeScript', color: '#3178c6' },\r\n            { name: 'Node.js', color: '#70a761' },\r\n        ],\r\n        post: 'world-of-tanks-api',\r\n    },\r\n    {\r\n        title: 'Docstring Generator',\r\n        description: `A Visual Studio Code extension for generating docstrings.`,\r\n        categories: [\r\n            { name: 'TypeScript', color: '#3178c6' },\r\n            { name: 'Node.js', color: '#70a761' },\r\n        ],\r\n        post: 'docstring-generator',\r\n    },\r\n    {\r\n        title: 'Manga Downloader',\r\n        description: `Search for and download the latest manga through command line.`,\r\n        categories: [{ name: 'Python', color: '#61dafb' }],\r\n        post: 'manga-downloader',\r\n    },\r\n    {\r\n        title: 'Bank System',\r\n        description: `A bank GUI that supports basic banking features built using NetBeans GUI Builder.`,\r\n        categories: [\r\n            { name: 'Java', color: '#e58f14' },\r\n            { name: 'Software GUI', color: 'grey' },\r\n        ],\r\n        post: 'bank-system',\r\n    },\r\n];\r\n\r\nexport const getCategories = (): { name: string; color: string }[] => {\r\n    let categories: { name: string; color: string }[] = [];\r\n\r\n    // Create an array containing every category\r\n    for (const project of projectData) {\r\n        categories = categories.concat(project.categories);\r\n    }\r\n\r\n    return Object.values(\r\n        categories.reduce(\r\n            (acc, cur) => Object.assign(acc, { [cur.name]: cur }),\r\n            {}\r\n        )\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { PageProps } from 'gatsby';\r\nimport styled from 'styled-components';\r\n\r\nimport SEO from '../components/seo';\r\nimport Layout from '../components/layout';\r\nimport Project from '../components/project';\r\nimport CategoryBox from '../components/category-box';\r\n\r\nimport { projectData, getCategories } from '../data/projects';\r\n\r\nconst ProjectHeader = styled.h1`\r\n    margin: 0 auto 10px;\r\n    padding: 5px;\r\n    overflow: hidden;\r\n\r\n    @media screen and (max-width: 420px) {\r\n        font-size: 1.8rem;\r\n    }\r\n`;\r\n\r\nconst ProjectDescription = styled.h3`\r\n    font-weight: normal;\r\n    font-size: 1rem;\r\n    margin: 0 auto 10px;\r\n\r\n    @media screen and (max-width: 420px) {\r\n        font-size: 0.8rem;\r\n    }\r\n`;\r\n\r\nconst ProjectContainer = styled.section`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n\r\n    @media screen and (max-width: 720px) {\r\n        margin: 0 auto;\r\n        max-width: 400px;\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nconst Projects = (props: PageProps) => {\r\n    const [projects, setProjects] = useState(projectData);\r\n    const categories = getCategories();\r\n\r\n    const filterProjects = (category: string | null) => {\r\n        if (category === null) {\r\n            setProjects(projectData);\r\n            return projectData;\r\n        }\r\n\r\n        const filteredProjects = [];\r\n        projectData.map((project) => {\r\n            let matchesCategory = false;\r\n            for (const projectCategory of project.categories) {\r\n                if (projectCategory.name === category) matchesCategory = true;\r\n            }\r\n            if (matchesCategory) filteredProjects.push(project);\r\n        });\r\n\r\n        setProjects(filteredProjects);\r\n        return filterProjects;\r\n    };\r\n\r\n    return (\r\n        <Layout>\r\n            <SEO />\r\n            <ProjectHeader>Projects</ProjectHeader>\r\n            <ProjectDescription>\r\n                Here is a list of all the projects I have created (so far)!\r\n            </ProjectDescription>\r\n            <ProjectDescription style={{ fontWeight: 'bold' }}>\r\n                Click on a project for more information\r\n            </ProjectDescription>\r\n            <CategoryBox\r\n                categories={categories}\r\n                filterProjects={filterProjects}\r\n            />\r\n            <ProjectContainer>\r\n                {projects.map((projectInfo) => (\r\n                    <Project key={projectInfo.title} {...projectInfo} />\r\n                ))}\r\n            </ProjectContainer>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Projects;\r\n"],"sourceRoot":""}