{"version":3,"sources":["webpack:///./src/components/project.tsx","webpack:///./src/components/category.tsx","webpack:///./src/components/category-box.tsx","webpack:///./src/data/enums.ts","webpack:///./src/data/projects.ts","webpack:///./src/pages/projects.tsx"],"names":["ProjectContainer","styled","div","Title","h2","Description","p","CategoryContainer","Category","span","props","color","Project","title","description","categories","post","onClick","navigate","sort","map","category","key","name","ButtonContainer","button","children","toggledState","useState","toggled","setToggled","event","className","CategoryBoxContainer","section","CategoryBoxHeader","h4","CategoryRow","CategoryBox","filterProjects","handleClick","currentTarget","innerHTML","includes","innerText","style","justifyContent","toObject","this","HTML","CSS","JavaScript","TypeScript","Java","Python","JSON","SoftwareGUI","Express","MySQL","React","Nodejs","MongoDB","projectData","ProjectHeader","h1","ProjectDescription","h3","Projects","projects","setProjects","project","concat","Object","values","reduce","acc","cur","assign","getCategories","console","log","filteredProjects","matchesCategory","push","fontWeight","projectInfo"],"mappings":"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","file":"component---src-pages-projects-tsx-484f9d29bd617ee7ae80.js","sourcesContent":["import React, { FunctionComponent } from 'react';\r\nimport styled from 'styled-components';\r\nimport { navigate } from 'gatsby';\r\n\r\ninterface CategoryFormat {\r\n    name: string;\r\n    color: string;\r\n}\r\n\r\ninterface ProjectProps {\r\n    title: string;\r\n    description: string;\r\n    categories: Array<CategoryFormat>;\r\n    post: string;\r\n}\r\n\r\nconst ProjectContainer = styled.div`\r\n    cursor: pointer;\r\n    padding: 5px;\r\n    margin: 10px 15px;\r\n    min-height: 150px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-content: center;\r\n    flex: 0 1 calc(100% / 2);\r\n    box-shadow: 2px 2px #d3d3d3;\r\n    border: 1px solid #cccccc;\r\n    background: #fdfdfd;\r\n\r\n    :hover {\r\n        transform: scale(1.1);\r\n        transition: 0.2s;\r\n    }\r\n`;\r\n\r\nconst Title = styled.h2`\r\n    text-align: center;\r\n    width: 100%;\r\n    padding: 5px;\r\n    font-size: 0.8rem;\r\n`;\r\n\r\nconst Description = styled.p`\r\n    padding: 0 auto;\r\n    font-size: 0.6rem;\r\n`;\r\n\r\nconst CategoryContainer = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    padding-bottom: 10px;\r\n    margin: auto auto 0;\r\n`;\r\n\r\nconst Category = styled.span`\r\n    color: #111111;\r\n    border: 1px solid ${(props) => props.color};\r\n    font-size: 0.6rem;\r\n    margin: 2px 6px;\r\n    padding: 2px 8px;\r\n`;\r\n\r\nconst Project: FunctionComponent<ProjectProps> = ({\r\n    title,\r\n    description,\r\n    categories,\r\n    post,\r\n}) => {\r\n    const handleClick = () => navigate(`/projects/${post}`);\r\n\r\n    return (\r\n        <ProjectContainer onClick={handleClick}>\r\n            <Title>{title}</Title>\r\n            <Description>{description}</Description>\r\n            <CategoryContainer>\r\n                {categories.sort().map((category) => (\r\n                    <Category key={category.name} color={category.color}>\r\n                        {category.name}\r\n                    </Category>\r\n                ))}\r\n            </CategoryContainer>\r\n        </ProjectContainer>\r\n    );\r\n};\r\n\r\nexport default Project;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ButtonContainer = styled.button`\r\n        cursor: pointer;\r\n        background: white;\r\n        border: 1px solid ${(props) => props.color || 'lightgrey'};\r\n        font-size: 0.6rem;\r\n        margin: 4px 3px;\r\n        padding: 2px 8px;\r\n\r\n        :hover {\r\n            transform: scale(1.2);\r\n            transition: 0.2s;\r\n\r\n        }\r\n\r\n        &.clicked {\r\n            background: ${(props) => props.color || 'lightgrey'},\r\n            transition: 0.2s\r\n        }\r\n    `;\r\n\r\nconst Category: React.FunctionComponent<{\r\n    color?: string;\r\n    toggledState?: boolean;\r\n}> = ({ children, color = 'grey', toggledState = false }) => {\r\n    const [toggled, setToggled] = useState(toggledState);\r\n\r\n    // let handleClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n    // if (handleClickCaregory) {\r\n    //     handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    //         setToggled(!toggled);\r\n    //         handleClickCaregory(event);\r\n    //     };\r\n    // } else if (handleClear) {\r\n    //     handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    //         setToggled(false);\r\n    //         handleClear(null);\r\n    //     };\r\n    // }\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setToggled(!toggled);\r\n    };\r\n\r\n    return (\r\n        <ButtonContainer\r\n            onClick={handleClick}\r\n            className={toggled ? 'clicked' : ''}\r\n            color={color}\r\n        >\r\n            {children}\r\n        </ButtonContainer>\r\n    );\r\n};\r\n\r\nexport default Category;\r\n","import React, { FunctionComponent } from 'react';\r\nimport styled from 'styled-components';\r\nimport Category from './category';\r\n\r\nconst CategoryBoxContainer = styled.section`\r\n    padding: 10px 0;\r\n`;\r\n\r\nconst CategoryBoxHeader = styled.h4`\r\n    font-weight: normal;\r\n    font-size: 0.9rem;\r\n\r\n    @media screen and (max-width: 420px) {\r\n        text-align: center;\r\n        font-size 0.8rem;\r\n    }\r\n`;\r\n\r\nconst CategoryRow = styled((props) => <div {...props}></div>)`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\ninterface CategoryBoxProps {\r\n    categories: Array<{ name: string; color: string }> | null;\r\n    filterProjects: (category: string | null) => void;\r\n}\r\n\r\n// const Category = styled.button`\r\n//     cursor: pointer;\r\n//     background: #ffffff;\r\n//     border: 1px solid ${(props) => props.color};\r\n//     font-size: 0.6rem;\r\n//     margin: 4px 3px;\r\n//     padding: 2px 8px;\r\n// `;\r\n\r\nconst CategoryBox: FunctionComponent<CategoryBoxProps> = ({\r\n    categories,\r\n    filterProjects,\r\n}) => {\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        if (event.currentTarget.innerHTML.includes('Clear Selection')) {\r\n            filterProjects(null);\r\n        } else {\r\n            filterProjects(event.currentTarget.innerText);\r\n        }\r\n    };\r\n\r\n    if (categories === null) return null;\r\n\r\n    return (\r\n        <CategoryBoxContainer>\r\n            <CategoryBoxHeader>\r\n                Select a category to sort projects:\r\n            </CategoryBoxHeader>\r\n            <CategoryRow style={{ justifyContent: 'flex-start' }}>\r\n                {categories.map((category) => (\r\n                    <span onClick={handleClick}>\r\n                        <Category color={category.color}>\r\n                            {category.name}\r\n                        </Category>\r\n                    </span>\r\n                ))}\r\n            </CategoryRow>\r\n            <CategoryRow style={{ justifyContent: 'flex-end' }}>\r\n                <span onClick={handleClick}>\r\n                    <Category>Clear Selection</Category>\r\n                </span>\r\n            </CategoryRow>\r\n        </CategoryBoxContainer>\r\n    );\r\n};\r\n\r\nexport default CategoryBox;\r\n","// Enum-like class for category objects\r\nexport class Category {\r\n    static readonly HTML = new Category('HTML', '#e44d26');\r\n    static readonly CSS = new Category('CSS', '#264de4');\r\n    static readonly JavaScript = new Category('JavaScript', '#264de4');\r\n    static readonly TypeScript = new Category('TypeScript', '#3178c6');\r\n    static readonly Java = new Category('Java', '#e58f14');\r\n    static readonly Python = new Category('Python', '#61dafb');\r\n    static readonly JSON = new Category('JSON', '#466df4');\r\n    static readonly SoftwareGUI = new Category('SoftwareGUI', 'grey');\r\n    static readonly Express = new Category('Express', 'green');\r\n    static readonly MySQL = new Category('MySQL', '#47809d');\r\n    static readonly React = new Category('React', '#61dafb');\r\n    static readonly Nodejs = new Category('Node.js', '#70a761');\r\n    static readonly MongoDB = new Category('MongoDB', '#e58f14');\r\n\r\n    private constructor(\r\n        private readonly name: string,\r\n        private readonly color: string\r\n    ) {}\r\n\r\n    toObject() {\r\n        return { name: this.name, color: this.color };\r\n    }\r\n}\r\n","import { Category } from './enums';\r\n\r\nexport const projectData = [\r\n    {\r\n        title: 'SoundTube',\r\n        description: `SoundTube is a social media and music sharing website.`,\r\n        categories: [\r\n            Category.HTML.toObject(),\r\n            Category.CSS.toObject(),\r\n            Category.JavaScript.toObject(),\r\n            Category.Express.toObject(),\r\n            Category.JSON.toObject(),\r\n            Category.MySQL.toObject(),\r\n            Category.Nodejs.toObject(),\r\n        ],\r\n        post: 'soundtube',\r\n    },\r\n    {\r\n        title: 'TypeScript MERN To Do Application',\r\n        description: `A to do application created in Typescript using the MERN Stack.`,\r\n        categories: [\r\n            Category.HTML.toObject(),\r\n            Category.CSS.toObject(),\r\n            Category.JavaScript.toObject(),\r\n            Category.TypeScript.toObject(),\r\n            Category.MongoDB.toObject(),\r\n            Category.React.toObject(),\r\n            Category.Nodejs.toObject(),\r\n        ],\r\n        post: 'todo',\r\n    },\r\n    {\r\n        title: 'World of Tanks TypeScript API Wrapper',\r\n        description: `A wrapper for WarGaming's API in TypeScript`,\r\n        categories: [\r\n            Category.TypeScript.toObject(),\r\n            Category.Nodejs.toObject(),\r\n        ],\r\n        post: 'world-of-tanks-api',\r\n    },\r\n    {\r\n        title: 'Docstring Generator',\r\n        description: `A Visual Studio Code extension for generating docstrings.`,\r\n        categories: [\r\n            Category.TypeScript.toObject(),\r\n            Category.Nodejs.toObject(),\r\n        ],\r\n        post: 'docstring-generator',\r\n    },\r\n    {\r\n        title: 'Manga Downloader',\r\n        description: `Search for and download the latest manga through command line.`,\r\n        categories: [Category.Python.toObject()],\r\n        post: 'manga-downloader',\r\n    },\r\n    {\r\n        title: 'Bank System',\r\n        description: `A bank GUI that supports basic banking features built using NetBeans GUI Builder.`,\r\n        categories: [Category.Java.toObject(), Category.SoftwareGUI.toObject()],\r\n        post: 'bank-system',\r\n    },\r\n    {\r\n        title: '1',\r\n        description: `A Visual Studio Code extension for generating docstrings.`,\r\n        categories: [\r\n            Category.TypeScript.toObject(),\r\n            Category.Nodejs.toObject(),\r\n        ],\r\n        post: '1',\r\n    },\r\n    {\r\n        title: '2',\r\n        description: `Search for and download the latest manga through command line.`,\r\n        categories: [Category.Python.toObject()],\r\n        post: '2',\r\n    },\r\n    {\r\n        title: '3',\r\n        description: `A bank GUI that supports basic banking features built using NetBeans GUI Builder.`,\r\n        categories: [Category.Java.toObject(), Category.SoftwareGUI.toObject()],\r\n        post: '3',\r\n    },\r\n];\r\n\r\nexport const getCategories = (): { name: string; color: string }[] => {\r\n    let categories: { name: string; color: string }[] = [];\r\n\r\n    // Create an array containing every category\r\n    for (const project of projectData) {\r\n        categories = categories.concat(project.categories);\r\n    }\r\n\r\n    return Object.values(\r\n        categories.reduce(\r\n            (acc, cur) => Object.assign(acc, { [cur.name]: cur }),\r\n            {}\r\n        )\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport SEO from '../components/seo';\r\nimport Layout from '../components/layout';\r\nimport Project from '../components/project';\r\nimport CategoryBox from '../components/category-box';\r\n\r\nimport { projectData, getCategories } from '../data/projects';\r\n\r\nconst ProjectHeader = styled.h1`\r\n    margin: 0 auto 10px;\r\n    padding: 5px;\r\n    overflow: hidden;\r\n\r\n    @media screen and (max-width: 420px) {\r\n        font-size: 1.8rem;\r\n    }\r\n`;\r\n\r\nconst ProjectDescription = styled.h3`\r\n    font-weight: normal;\r\n    font-size: 1rem;\r\n    margin: 0 auto 10px;\r\n\r\n    @media screen and (max-width: 420px) {\r\n        font-size: 0.8rem;\r\n    }\r\n`;\r\n\r\nconst ProjectContainer = styled.section`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n\r\n    @media screen and (max-width: 720px) {\r\n        margin: 0 auto;\r\n        max-width: 400px;\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nconst Projects = () => {\r\n    const [projects, setProjects] = useState(projectData);\r\n    const categories = getCategories();\r\n\r\n    const filterProjects = (category: string | null) => {\r\n        if (category === null) {\r\n            console.log('here');\r\n            return setProjects(projectData);\r\n        }\r\n\r\n        const filteredProjects = [];\r\n        projectData.map((project) => {\r\n            let matchesCategory = false;\r\n            for (const projectCategory of project.categories) {\r\n                if (projectCategory.name === category) matchesCategory = true;\r\n            }\r\n            if (matchesCategory) filteredProjects.push(project);\r\n        });\r\n\r\n        setProjects(filteredProjects);\r\n    };\r\n\r\n    return (\r\n        <Layout>\r\n            <SEO />\r\n            <ProjectHeader>Projects</ProjectHeader>\r\n            <ProjectDescription>\r\n                Here is a list of all the projects I have created (so far)!\r\n            </ProjectDescription>\r\n            <CategoryBox\r\n                categories={categories}\r\n                filterProjects={filterProjects}\r\n            />\r\n            <ProjectDescription style={{ fontWeight: 'bold' }}>\r\n                Click on a project for more information\r\n            </ProjectDescription>\r\n            <ProjectContainer>\r\n                {projects.map((projectInfo) => (\r\n                    <Project key={projectInfo.title} {...projectInfo} />\r\n                ))}\r\n            </ProjectContainer>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Projects;\r\n"],"sourceRoot":""}